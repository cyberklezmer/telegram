summarize(count = sum(count, na.rm = TRUE), .groups = "drop") %>%
select(count, hex_u_emo, name)
top_emoticons <- top_emoticons %>%
left_join(emo_sentiments, by = c("hex_u_emo" = "hexcode"))
distinct_counts <- emoticons %>%
summarise(across(everything(), ~ n_distinct(.)))
print(distinct_counts)
# Create a ranking based on descending "count" from top_emoticons
top_emoticons <- top_emoticons %>%
arrange(desc(count)) %>%  # Sort descending by count
mutate(rank = row_number())  # Add rank for sorting
write.csv(top_emoticons, "top_emotions.csv")
# Add required library for table rendering
global_catalogue_table <- data.frame()
# Loop through each row in top_channels
for (i in 1:nrow(top_channels)) {
username <- top_channels$username[i]
this_channel_id <- top_channels$channel_id[i]
print(username)
# Filter the row from catalogue_data matching the current channel_id
channel_data <- catalogue_data %>% filter(channel_id == this_channel_id)
nsubscribers <- channel_data$subscribers
# Query reactions data
sqltext <- paste0("SELECT *, HEX(reaction_emo) as hex_r_emo FROM message_reactions WHERE channel_id=", this_channel_id)
reactions_data <- dbGetQuery(con, sqltext)
# Joining reactions_data with emoticons
merged_data <- reactions_data %>%
left_join(emoticons, by = c("hex_r_emo" = "hex_emo"))
# Group and summarize
grouped_data <- merged_data %>%
mutate(hex_u_emo = if_else(is.na(hex_u_emo), "other", hex_u_emo)) %>%
group_by(message_id,hex_u_emo) %>%
summarise(count = sum(count, na.rm = TRUE), .groups = 'drop')
grouped_data <- grouped_data %>%
left_join(emo_sentiments, by = c("hex_u_emo" = "hexcode"))
grouped_data <- grouped_data %>%
mutate(
neutral = neutral_norm * count,
positive = positive_norm * count,
negative = negative_norm * count
)
grouped_data_summary <- grouped_data %>%
summarize(
messages_reacted_to = n_distinct(message_id),
reaction_rows = n(),                                      # Count total rows
reactions_with_sentiment = sum(if_else(!is.na(neutral_norm), count, 0), na.rm = TRUE), # Summing counts with condition
total_reactions_count = sum(count, na.rm = TRUE),
total_neutral = sum(neutral, na.rm = TRUE),
total_negative = sum(negative, na.rm = TRUE),
total_positive = sum(positive, na.rm = TRUE)
)
# Filter and prepare data for visualization
filtered_grouped_data <- grouped_data %>%
mutate(hex_u_emo = if_else(
hex_u_emo %in% top_emoticons$hex_u_emo,
hex_u_emo,
"other"
)) %>%
group_by(hex_u_emo, message_id) %>%
summarise(count = sum(count, na.rm = TRUE), .groups = 'drop') %>%
left_join(top_emoticons %>% select(hex_u_emo, rank), by = "hex_u_emo") %>%
mutate(rank = if_else(is.na(rank), Inf, rank)) %>%
arrange(rank, desc(count)) %>%
select(-rank)
reaction_summary <- filtered_grouped_data %>%
pivot_wider(
names_from = hex_u_emo,
values_from = count,
values_fill = list(count = 0)
) %>%
ungroup()
# Save summarized data to CSV
write.csv(reaction_summary, paste0(output_folder, username, "_reaction_summary.csv"), row.names = FALSE)
# Generate histogram plot
reaction_totals <- colSums(reaction_summary[-1])
reaction_totals_df <- data.frame(
Reaction = names(reaction_totals),
Total = as.numeric(reaction_totals)
)
reaction_totals_df$Reaction_UTF8 <- hex_to_text(reaction_totals_df$Reaction)
# Create plot
png_file <- paste0(output_folder, username , "_hist.png")
png(file = png_file)
reaction_totals_df <- reaction_totals_df %>%
mutate(Reaction_UTF8 = factor(Reaction_UTF8, levels = Reaction_UTF8))
p <- ggplot(reaction_totals_df, aes(x = Reaction_UTF8, y = Total)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Total Reactions by Type",
x = "Reaction Type",
y = "Total Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(family = "AppleColorEmoji", hjust = 1))
print(p)
dev.off()
# Read the generated PNG
raster_image <- readPNG(png_file)
# Create a table from the corresponding row in catalogue_data
# Convert all columns to character to handle mixed types
channel_data <- channel_data %>%
mutate(
reacts_per_msg = reaction_count / msg_count,
rpms = reacts_per_msg / subscribers
)
channel_data <- channel_data %>%
mutate(across(everything(), as.character))
# Transform the row into a long format
channel_data_long <- channel_data %>%
pivot_longer(cols = everything(),
names_to = "Label",
values_to = username)
grouped_data_summary <- grouped_data_summary %>%
mutate(
positiveness = (total_positive - total_negative) / reactions_with_sentiment,
neutrality = total_neutral / reactions_with_sentiment,
polarization = sqrt((total_positive + total_negative) / reactions_with_sentiment - positiveness * positiveness)
)
grouped_data_summary <- grouped_data_summary %>%
select(-c(total_positive,total_negative,total_neutral))
grouped_data_long <- grouped_data_summary %>%
pivot_longer(cols = everything(), names_to = "Label", values_to = username) %>%
mutate(across(everything(), as.character))
# Combine grouped_data_summary with channel_data_long
extended_data <- bind_rows(
channel_data_long,
grouped_data_long
)
# Create a tableGrob from the extended data
catalogue_table <- tableGrob(extended_data, rows = NULL, theme = ttheme_default())
pdf(file = paste0(output_folder, username, "_info.pdf"), width = 8, height = 10)
# Ensure the graphics device is active
grid.newpage()
# Render the table into the PDF
grid.draw(catalogue_table)
dev.off()
#  grid.newpage()
# Add plot
#  grid.raster(raster_image)
# Add the updated table
#  grid.newpage()
#  grid.draw(catalogue_table)
# Create a tableGrob from the extended data
catalogue_table <- tableGrob(extended_data, rows = NULL, theme = ttheme_default())
pdf(file = paste0(output_folder, username, "_info.pdf"), width = 8, height = 10)
grid.newpage()
# Add plot
grid.raster(raster_image)
# Add table
grid.newpage()
grid.draw(catalogue_table)
grouped_data <-grouped_data %>%
mutate(
emoinfo = paste0("<br>",hex_to_text(hex_u_emo)," ",count)
)
message_totals <- grouped_data %>%
group_by(message_id) %>%
summarize(
reaction_rows = n(),                                      # Count total rows
reactions_with_sentiment = sum(if_else(!is.na(neutral_norm), count, 0), na.rm = TRUE), # Summing counts with condition
# Count non-NA values in neutral
total_reactions_count = sum(count, na.rm = TRUE),
total_neutral = sum(neutral, na.rm = TRUE),
total_negative = sum(negative, na.rm = TRUE),
total_positive = sum(positive, na.rm = TRUE),
all_emoinfo = toString(unique(emoinfo))
) # %>%
#  filter(message_id == 72317)
message_totals <- message_totals %>%
mutate(
positiveness = (total_positive - total_negative) / reactions_with_sentiment,
neutrality = total_neutral / reactions_with_sentiment,
polarization = sqrt((total_positive + total_negative) / reactions_with_sentiment - positiveness*positiveness)
)
if(nrow(message_totals) >= 1)  {
list_messages(username,"total_reactions_count", TRUE )
list_messages(username,"positiveness", TRUE )
list_messages(username,"positiveness", FALSE )
list_messages(username,"polarization", TRUE )
# Step 1: Filter top 10 messages by total_reaction_count
}
if (nrow(global_catalogue_table) == 0) {
global_catalogue_table <- extended_data
} else {
global_catalogue_table <- bind_cols(global_catalogue_table, extended_data[,2])
}
graphics.off()  # Close all open devices
}
write.csv(global_catalogue_table, file.path(output_folder, "global_catalogue_table_wide.csv"), row.names = FALSE)
dbDisconnect(con)
install.packages("plotly")
library(DBI)
library(psych)
library(factoextra)
library(gridExtra)
library(RMySQL)
library(dplyr)
library(stringr)
library(xtable)
library(knitr)
library(ggplot2)
library(tidyr)
library(stringr)
library(igraph)
library(ggraph)
library(tibble)
library(systemfonts)
library(png)
library(grid)
library(kableExtra)
library(knitr)
chnumber <- 10
# Define output folder for CSV and PDF
output_folder <- "out/"
# Connect to MySQL database
con <- dbConnect(
MySQL(),
host = "bethel.utia.cas.cz",
user = "jak",
password = "jaknajaka",
dbname = "telegram_full"
)
library(DBI)
library(psych)
library(factoextra)
library(gridExtra)
library(RMySQL)
library(dplyr)
library(stringr)
library(xtable)
library(knitr)
library(ggplot2)
library(tidyr)
library(stringr)
library(igraph)
library(ggraph)
library(tibble)
library(systemfonts)
library(png)
library(grid)
library(kableExtra)
library(knitr)
chnumber <- 20
# Define output folder for CSV and PDF
output_folder <- "out/"
inisig_hist <- 20
test_treshold <- 2.5
orange_ratio <- 3
list_threshold <- 5
compute_mode <- function(x) {
uniq_x <- unique(x)            # Get unique values
uniq_x[which.max(tabulate(match(x, uniq_x)))]  # Find the most frequent value
}
# Connect to MySQL database
con <- dbConnect(
MySQL(),
host = "bethel.utia.cas.cz",
user = "jak",
password = "jaknajaka",
dbname = "telegram_full"
)
# Query the database for relevant data
# catalogue_data <- dbGetQuery(con, "SELECT channel_id, username, CONVERT(name USING ASCII) as name, subscribers, catalogue_count,
#             msg_count, reaction_count, forwarded_from, forwarded_to, lang FROM channels_info WHERE (source = 'slerka')")
catalogue_data <- dbGetQuery(con, "SELECT channel_id, username, CONVERT(name USING ASCII) as name, subscribers, catalogue_count,
msg_count, reaction_count, forwarded_from, forwarded_to, lang FROM channels_info WHERE (lang = 'CZECH' or lang = 'SLOVAK')")
catalogue_data <- catalogue_data %>%
mutate(subscribers = if_else(
str_detect(subscribers, "K"),
as.numeric(str_replace(subscribers, "K", "")) * 1000,
if_else(
str_detect(subscribers, "M"),as.numeric(str_replace(subscribers, "M", "")) * 1000000, as.numeric(subscribers))
))
catalogue_data <- catalogue_data %>%
mutate(reach_own = subscribers * msg_count)
top_channels_reach <- catalogue_data %>%
arrange(desc(reach_own)) %>%
head(chnumber)
top_channels_to <- catalogue_data %>%
arrange(desc(forwarded_to)) %>%
head(chnumber)
top_channels_from <- catalogue_data %>%
arrange(desc(forwarded_from)) %>%
head(chnumber)
top_channels <- bind_rows(top_channels_reach, top_channels_to, top_channels_from) %>%
distinct()
global_catalogue_table <- data.frame()
# Loop through each row in top_channels
forwards_data <- dbGetQuery(con, "SELECT * from forwards")
forwards_data <- forwards_data %>%
inner_join(top_channels, by = c("channel_id" = "channel_id")) %>%
rename(dst_username = username )  %>%
inner_join(top_channels, by = c("src_channel_id" = "channel_id")) %>%
rename(src_username = username )
forwards_data <- forwards_data %>%
mutate(log_forward_time = log10(as.numeric(difftime(posted, src_posted, units = "secs"))),
cat_forward_time = ceiling(log_forward_time*2)/2) %>%
select(src_username, dst_username, log_forward_time,cat_forward_time)
output_csv <- file.path(output_folder, "forward_data.csv")
write.csv(forwards_data,output_csv)
summary_table <- forwards_data %>%
group_by(src_username, dst_username) %>%            # Group by src_channel_id and channel_id
filter(n() >= list_threshold) %>%                               # Keep groups with at least 10 records
summarise(
mean_forward_time = mean(log_forward_time, na.rm = TRUE), # Mean forward time
mode_forward_time = compute_mode(cat_forward_time), # Mean forward time
sd_forward_time = sd(log_forward_time, na.rm = TRUE),     # Standard deviation of forward time
n_records = n(),
# Number of records
ratio_below_t = sum(log_forward_time < test_treshold, na.rm = TRUE) / n(),
# Number of records
.groups = "drop"                                      # Ungroup after summarising
)  %>%
mutate( left_ratio = ratio_below_t / pnorm(test_treshold, mean = mean_forward_time, sd = sd_forward_time, lower.tail = TRUE, log.p = FALSE),
bar_color = if_else(n_records < inisig_hist,"grey",
if_else(mode_forward_time <= 2, "black",
if_else(left_ratio > orange_ratio,"red", "darkgreen")))
)
output_csv <- file.path(output_folder, "forward_time_summary.csv")
write.csv(summary_table,output_csv)
# Filter data for combinations with at least 50 rows
filtered_data <- forwards_data %>%
group_by(src_username, dst_username) %>%
filter(n() >= list_threshold) %>%
ungroup()
output_pdf <- file.path(output_folder, "forward_time_histograms_grid.pdf")
# Add a flag for small datasets if needed
merged_data <- filtered_data %>%
left_join(summary_table %>%
select(src_username, dst_username, mode_forward_time, n_records,left_ratio, bar_color),
by = c("src_username", "dst_username"))
# Add a flag for small datasets if needed
if (nrow(merged_data) == 0) {
stop("No combinations with at least 50 rows found.")
}
# Create a faceted plot with color based on mode_forward_time
# Load necessary libraries
# Define output folder for PDF
# Add missing '1' for cat_forward_time for each combination
write.csv(merged_data,paste0(output_folder,"data_for_grid.csv"))
output_pdf <- file.path(output_folder, "forward_time_histograms_colored_start1.pdf")
# Create a faceted plot with forced x-axis starting from 1 and colored bars
p <- ggplot(merged_data, aes(x = cat_forward_time, fill = bar_color)) +
geom_histogram(stat = "count", binwidth = 1, color = "white", alpha = 0.7) +
scale_fill_manual(values = c("red" = "Sus", "darkgreen" = "darkgreen", "grey" = "grey", "black" = "black")) +
scale_x_continuous(breaks = 0:8, limits = c(0, 8)) +
labs(
x = "t",
y = "freq"
) +
theme_minimal() +
facet_grid(rows = vars(src_username), cols = vars(dst_username), scales = "free") +
theme(
strip.text.x = element_text(angle = 45, hjust = 1),
strip.text.y = element_text(angle = 0)
)
# Save the plot to a PDF
ggsave(output_pdf, plot = p, width = 16, height = 12)
# Create a faceted plot with forced x-axis starting from 1 and colored bars
p <- ggplot(merged_data, aes(x = cat_forward_time, fill = bar_color)) +
geom_histogram(stat = "count", binwidth = 1, color = "white", alpha = 0.7) +
scale_fill_manual(values = c("red" = "red", "darkgreen" = "darkgreen", "grey" = "grey", "black" = "black")) +
scale_x_continuous(breaks = 0:8, limits = c(0, 8)) +
labs(
x = "t",
y = "freq"
) +
theme_minimal() +
facet_grid(rows = vars(src_username), cols = vars(dst_username), scales = "free") +
theme(
strip.text.x = element_text(angle = 45, hjust = 1),
strip.text.y = element_text(angle = 0)
)
# Save the plot to a PDF
ggsave(output_pdf, plot = p, width = 16, height = 12)
library(DBI)
library(psych)
library(factoextra)
library(gridExtra)
library(RMySQL)
library(dplyr)
library(stringr)
library(xtable)
library(knitr)
library(ggplot2)
library(tidyr)
library(stringr)
library(igraph)
library(ggraph)
library(tibble)
library(systemfonts)
library(png)
library(grid)
library(kableExtra)
library(knitr)
chnumber <- 15
# Define output folder for CSV and PDF
output_folder <- "out/"
inisig_hist <- 20
test_treshold <- 2.5
orange_ratio <- 3
list_threshold <- 5
compute_mode <- function(x) {
uniq_x <- unique(x)            # Get unique values
uniq_x[which.max(tabulate(match(x, uniq_x)))]  # Find the most frequent value
}
# Connect to MySQL database
con <- dbConnect(
MySQL(),
host = "bethel.utia.cas.cz",
user = "jak",
password = "jaknajaka",
dbname = "telegram_full"
)
# Query the database for relevant data
# catalogue_data <- dbGetQuery(con, "SELECT channel_id, username, CONVERT(name USING ASCII) as name, subscribers, catalogue_count,
#             msg_count, reaction_count, forwarded_from, forwarded_to, lang FROM channels_info WHERE (source = 'slerka')")
catalogue_data <- dbGetQuery(con, "SELECT channel_id, username, CONVERT(name USING ASCII) as name, subscribers, catalogue_count,
msg_count, reaction_count, forwarded_from, forwarded_to, lang FROM channels_info WHERE (lang = 'CZECH' or lang = 'SLOVAK')")
catalogue_data <- catalogue_data %>%
mutate(subscribers = if_else(
str_detect(subscribers, "K"),
as.numeric(str_replace(subscribers, "K", "")) * 1000,
if_else(
str_detect(subscribers, "M"),as.numeric(str_replace(subscribers, "M", "")) * 1000000, as.numeric(subscribers))
))
catalogue_data <- catalogue_data %>%
mutate(reach_own = subscribers * msg_count)
top_channels_reach <- catalogue_data %>%
arrange(desc(reach_own)) %>%
head(chnumber)
top_channels_to <- catalogue_data %>%
arrange(desc(forwarded_to)) %>%
head(chnumber)
top_channels_from <- catalogue_data %>%
arrange(desc(forwarded_from)) %>%
head(chnumber)
top_channels <- bind_rows(top_channels_reach, top_channels_to, top_channels_from) %>%
distinct()
global_catalogue_table <- data.frame()
# Loop through each row in top_channels
forwards_data <- dbGetQuery(con, "SELECT * from forwards")
forwards_data <- forwards_data %>%
inner_join(top_channels, by = c("channel_id" = "channel_id")) %>%
rename(dst_username = username )  %>%
inner_join(top_channels, by = c("src_channel_id" = "channel_id")) %>%
rename(src_username = username )
forwards_data <- forwards_data %>%
mutate(log_forward_time = log10(as.numeric(difftime(posted, src_posted, units = "secs"))),
cat_forward_time = ceiling(log_forward_time*2)/2) %>%
select(src_username, dst_username, log_forward_time,cat_forward_time)
output_csv <- file.path(output_folder, "forward_data.csv")
write.csv(forwards_data,output_csv)
summary_table <- forwards_data %>%
group_by(src_username, dst_username) %>%            # Group by src_channel_id and channel_id
filter(n() >= list_threshold) %>%                               # Keep groups with at least 10 records
summarise(
mean_forward_time = mean(log_forward_time, na.rm = TRUE), # Mean forward time
mode_forward_time = compute_mode(cat_forward_time), # Mean forward time
sd_forward_time = sd(log_forward_time, na.rm = TRUE),     # Standard deviation of forward time
n_records = n(),
# Number of records
ratio_below_t = sum(log_forward_time < test_treshold, na.rm = TRUE) / n(),
# Number of records
.groups = "drop"                                      # Ungroup after summarising
)  %>%
mutate( left_ratio = ratio_below_t / pnorm(test_treshold, mean = mean_forward_time, sd = sd_forward_time, lower.tail = TRUE, log.p = FALSE),
bar_color = if_else(n_records < inisig_hist,"grey",
if_else(mode_forward_time <= 2, "black",
if_else(left_ratio > orange_ratio,"red", "darkgreen")))
)
output_csv <- file.path(output_folder, "forward_time_summary.csv")
write.csv(summary_table,output_csv)
# Filter data for combinations with at least 50 rows
filtered_data <- forwards_data %>%
group_by(src_username, dst_username) %>%
filter(n() >= list_threshold) %>%
ungroup()
output_pdf <- file.path(output_folder, "forward_time_histograms_grid.pdf")
# Add a flag for small datasets if needed
merged_data <- filtered_data %>%
left_join(summary_table %>%
select(src_username, dst_username, mode_forward_time, n_records,left_ratio, bar_color),
by = c("src_username", "dst_username"))
# Add a flag for small datasets if needed
if (nrow(merged_data) == 0) {
stop("No combinations with at least 50 rows found.")
}
# Create a faceted plot with color based on mode_forward_time
# Load necessary libraries
# Define output folder for PDF
# Add missing '1' for cat_forward_time for each combination
write.csv(merged_data,paste0(output_folder,"data_for_grid.csv"))
output_pdf <- file.path(output_folder, "forward_time_histograms_colored_start1.pdf")
# Create a faceted plot with forced x-axis starting from 1 and colored bars
p <- ggplot(merged_data, aes(x = cat_forward_time, fill = bar_color)) +
geom_histogram(stat = "count", binwidth = 1, color = "white", alpha = 0.7) +
scale_fill_manual(values = c("red" = "red", "darkgreen" = "darkgreen", "grey" = "grey", "black" = "black")) +
scale_x_continuous(breaks = 0:8, limits = c(0, 8)) +
labs(
x = "t",
y = "freq"
) +
theme_minimal() +
facet_grid(rows = vars(src_username), cols = vars(dst_username), scales = "free") +
theme(
strip.text.x = element_text(angle = 45, hjust = 1),
strip.text.y = element_text(angle = 0)
)
# Save the plot to a PDF
ggsave(output_pdf, plot = p, width = 16, height = 12)
dbDisconnect(con)
